import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sb
import mysql.connector
import numpy as np

db = mysql.connector.connect(
    host="####", user="####", password="####", database="target_ecommerce"
)

cursor = db.cursor()

# 1. List all unique cities where customers are located.
query1 = "SELECT DISTINCT(customer_city) from customers"
cursor.execute(query1)
data = cursor.fetchall()
df = pd.DataFrame(data)
df.head()

# 2. Count the number of orders placed in 2017.
query2 = "SELECT COUNT(order_id) FROM orders WHERE year(order_purchase_timestamp) = 2017"
cursor.execute(query2)
data = cursor.fetchall()
print(data[0][0])

# 3. Find the total sales per category.
query3 = """SELECT products.product_category,ROUND(SUM(payments.payment_value),2)
FROM products JOIN order_items ON products.product_id = order_items.product_id
JOIN payments ON payments.order_id = order_items.order_id
GROUP BY product_category
"""
cursor.execute(query3)
data = cursor.fetchall()
df = pd.DataFrame(data,columns=["Category","Sales"])
print(df)


# 4. Calculate the percentage of orders that were paid in installments.
query4 = """SELECT (SUM(CASE WHEN payment_installments >= 1 THEN 1 ELSE 0 END))/COUNT(*)*100
FROM payments"""
cursor.execute(query4)
data = cursor.fetchall()
print(data)

# 5. Count the number of customers from each state.
query5 = """SELECT customer_state, COUNT(customer_id) FROM customers GROUP BY customer_state"""
cursor.execute(query5)
data = cursor.fetchall()
df = pd.DataFrame(data, columns=["State", "Customer_count"]).sort_values(
    by="Customer_count", ascending=False
)
print(df)
plt.figure(figsize=(8, 2))
plt.bar(df["State"], df["Customer_count"])
plt.xlabel("States")
plt.ylabel("Customer_count")
plt.title("Count of Customers by States")
plt.xticks(rotation=90)
plt.show()

# 6. Calculate the number of orders per month in 2018.
query6 = """SELECT MONTHNAME(order_purchase_timestamp) months, COUNT(order_id) order_count FROM orders
WHERE YEAR(order_purchase_timestamp) = 2018 GROUP BY months"""
cursor.execute(query6)
data = cursor.fetchall()
df = pd.DataFrame(data,columns=["months","order_count"])
o = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']
ax = sb.barplot(x = df["months"], y = df["order_count"],data = df,order = o)
plt.xticks(rotation = 45)
ax.bar_label(ax.containers[0])
plt.title("Count of Orders by Months is 2018")
plt.show()

# 7. Find the average number of products per order, grouped by customer city.
query7 = """with count_per_order as (
SELECT orders.order_id, orders.customer_id,
COUNT(order_items.order_id) as oc from orders
join order_items on orders.order_id = order_items.order_id
group by orders.order_id,orders.customer_id
)
select customers.customer_city,round(avg(count_per_order.oc),2) average_orders
from customers
join count_per_order on customers.customer_id = count_per_order.customer_id
group by customers.customer_city order by average_orders
"""
cursor.execute(query7)
data = cursor.fetchall()
df = pd.DataFrame(data,columns = ["customer_city","average_products/order"])
df.head(10)


# 8. Calculate the percentage of total revenue contributed by each product category.
query8 = """select upper(products.product_category) category,
round((sum(payments.payment_value)/(select sum(payment_value) from payments))*100,2) sales
from products join order_items on products.product_id = order_items.product_id
join payments on payments.order_id = order_items.order_id group by category order by sales desc
"""
cursor.execute(query8)
data = cursor.fetchall()
df = pd.DataFrame(data,columns = ["category","'%' distribution"])
print(df.head())

# 9. Identify the correlation between product price and the number of times a product has been purchased.
query9 = """select products.product_category, count(order_items.product_id),
round(avg(order_items.price),2)
from products join order_items on products.product_id = order_items.product_id
group by products.product_category
"""
cursor.execute(query9)
data = cursor.fetchall()
df = pd.DataFrame(data, columns=["category", "order_count", "price"])
print(df.head())
arr1 = df["order_count"]
arr2 = df["price"]
result = np.corrcoef([arr1, arr2])
print(result)


# 10. Calculate the total revenue generated by each seller, and rank them by revenue.
query10 = """SELECT *, dense_rank() over(order by revenue desc) as rn
from(SELECT order_items.seller_id,sum(payments.payment_value) revenue
from order_items join payments on
order_items.order_id = payments.order_id
group by order_items.seller_id) as a
"""
cursor.execute(query10)
data = cursor.fetchall()
df = pd.DataFrame(data, columns=["seller_id", "revenue", "rank"])
print(df.head())
sb.barplot(x="seller_id", y="revenue", data=df.head())
plt.xticks(rotation = 90)
plt.show()


# 11. Calculate the moving average of order values for each customer over their order history.
query11 = """
select customer_id,order_purchase_timestamp,payment,
avg(payment) over(partition by customer_id order by order_purchase_timestamp
rows between 2 preceding and current row) as mov_avg
from (select orders.customer_id,orders.order_purchase_timestamp,
payments.payment_value as payment from payments join orders
on payments.order_id = orders.order_id) as a"""
cursor.execute(query11)
data = cursor.fetchall()
df = pd.DataFrame(data)
print(df)

# 12. Calculate the cumulative sales per month for each year.
query12 = """select years,months,payment,sum(payment) over(order by years, months) cumulative_sales
            from
            (select year(orders.order_purchase_timestamp) as years,
            month(orders.order_purchase_timestamp) as months,
            round(sum(payments.payment_value),2) as payment from orders join payments
            on orders.order_id = payments.order_id
            group by years, months order by years,months) as a"""
cursor.execute(query12)
data = cursor.fetchall()
df = pd.DataFrame(data,columns=["year","month","sales","cumulative sales"])
print(df)

# 13. Calculate the year-over-year growth rate of total sales.
query13 = """with a as
            (select year(orders.order_purchase_timestamp) as years,
            round(sum(payments.payment_value),2) as payment from orders join payments
            on orders.order_id = payments.order_id
            group by years order by years)
            
            select years, ((payment - lag(payment,1) over(order by years)) /
            lag(payment,1) over(order by years)) * 100 from a"""
cursor.execute(query13)
data = cursor.fetchall()
df = pd.DataFrame(data, columns=["years", "yoy % growth"])
print(df)

# 14. Calculate the retention rate of customers, defined as the percentage of customers who make another purchase within 6 months of their first purchase.
query14 = """with a as (select customers.customer_id,
min(orders.order_purchase_timestamp) first_order
from customers join orders
on customers.customer_id = orders.customer_id
group by customers.customer_id),
b as (select a.customer_id, count(distinct orders.order_purchase_timestamp) next_order
from a join orders
on orders.customer_id = a.customer_id
and orders.order_purchase_timestamp > first_order
and orders.order_purchase_timestamp < 
date_add(first_order, interval 6 month)
group by a.customer_id) 

select 100 * (count( distinct a.customer_id)/ count(distinct b.customer_id)) 
from a left join b 
on a.customer_id = b.customer_id ;"""
cursor.execute(query14)
data = cursor.fetchall()
print(data)

# 15. Identify the top 3 customers who spent the most money in each year.
query15 = """
        select years, customer_id, payment, d_rank 
        from
        (select year(orders.order_purchase_timestamp) years, orders.customer_id,
        sum(payments.payment_value) payment,
        dense_rank() over(partition by year(orders.order_purchase_timestamp)
        order by sum(payments.payment_value) desc) d_rank
        from orders join payments
        on payments.order_id = orders.order_id
        group by year(orders.order_purchase_timestamp),
        orders.customer_id) as a
        where d_rank <=3"""
cursor.execute(query15)
data = cursor.fetchall()
df = pd.DataFrame(data, columns=["years", "id", "payment", "rank"])
print(df)
sb.barplot(x="id", y="payment", data=df, hue="years")
plt.xticks(rotation=90)
plt.show()

